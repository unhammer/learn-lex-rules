# -*- mode: Makefile -*-

##########
# Notes: #
##########

# Don't use this directly, make a subdirectory and put your Makefile
# there (see sme-nob/Makefile for an example).

# Assumes that:
# * There are input files named incorp.lang1 and incorp.lang2 in your
#   subdirectory
# * There are modes named lang1-lang2-pretransfer and
#   lang2-lang1-pretransfer in your pair directory
# * You have the pair and its dependencies set up and working.


##############
# Variables: #
##############

CORPUS=incorp.$(LANG1) incorp.$(LANG2)

# cores to use for mgiza:
CPUS=3

PREFIX1=$(LANG1)-$(LANG2)
PREFIX2=$(LANG2)-$(LANG1)

# The directory of this Makefile
TOP := $(dir $(CURDIR)/$(word $(words $(MAKEFILE_LIST)),$(MAKEFILE_LIST)))

export PATH := $(TOP)/local/bin:$(PATH)
export IRSTLM := $(TOP)/local

LEX_SCRIPTS=$(TOP)/apertium-lex-tools/scripts

# Don't delete intermediates:
.SECONDARY:

##########
# Goals: #
##########

all: $(CORPUS) \
     corp.tag-clean.$(LANG1) \
     corp.tag-clean.$(LANG2) \
     corp.phrasetable-pretransfer.$(PREFIX1)


### Grab the top n lines of the corpus:
corp.head.%: incorp.%
	grep -v '	' $< | head -n $(TRAINING_LINES) > $@


### Tag the text up to pretransfer:
corp.pretransfer.$(LANG1): corp.head.$(LANG1)
	<$< apertium-deshtml | apertium -f none -d "$(PAIRDIR)" $(PREFIX1)-pretransfer >$@.tmp
	mv $@.tmp $@

corp.pretransfer.$(LANG2): corp.head.$(LANG2)
	<$< apertium-deshtml | apertium -f none -d "$(PAIRDIR)" $(PREFIX2)-pretransfer >$@.tmp
	mv $@.tmp $@

corp.line_nums:
	seq 1 $(TRAINING_LINES) >$@


### Remove empty line_nums:
%.noempty.$(LANG1) %.noempty.$(LANG2): %.pretransfer.$(LANG1) %.pretransfer.$(LANG2) %.line_nums
	paste $^ | grep '<' > $*.noempty.$(PREFIX1)
	cut -f1 $*.noempty.$(PREFIX1) >$*.noempty.$(LANG1)
	cut -f2 $*.noempty.$(PREFIX1) >$*.noempty.$(LANG2)
	cut -f3 $*.noempty.$(PREFIX1) >$*.noempty.line_nums

### Ensure whitespace can be used as a tokeniser, and we only have
### actual analyses in the stream, with no line-spanning analyses:
corp.tagged.%: corp.noempty.%
	sed 's/ /~/g' <$< | sed 's/\$$[^^]*/$$ /g; s/^[^^]*//; s/[$$][^$$]*$$/$$/' >$@
# This should be suitable as both input to giza, and for running
# through multitrans.


### Grab Moses and let Moses clean it:
$(TOP)/mosesdecoder:
	git clone https://github.com/moses-smt/mosesdecoder.git $@
	cd $@ && ./bjam

%.tag-clean.$(LANG1) %.tag-clean.$(LANG2): %.tagged.$(LANG1) %.tagged.$(LANG2) $(TOP)/mosesdecoder
	perl $(TOP)/mosesdecoder/scripts/training/clean-corpus-n.perl $*.tagged $(LANG1) $(LANG2) $*.tag-clean 1 40

### Trim tags:
$(PREFIX1).nopardefs.dix: $(PAIRDIR)/apertium-$(PREFIX1).$(PREFIX1).dix
	xsltproc $(TOP)/empty-pardefs.xsl $< >$@

$(PREFIX1).autobil.bin: $(PREFIX1).nopardefs.dix
	apertium-validate-dictionary $<
	lt-comp lr $< $@

$(PREFIX2).autobil.bin: $(PREFIX1).nopardefs.dix
	apertium-validate-dictionary $<
	lt-comp rl $< $@

corp.tag-trim.$(LANG1): corp.tag-clean.$(LANG1) $(PREFIX1).autobil.bin
	<$< multitrans $(PREFIX1).autobil.bin -p -t >$@

corp.tag-trim.$(LANG2): corp.tag-clean.$(LANG2) $(PREFIX2).autobil.bin
	<$< multitrans $(PREFIX2).autobil.bin -p -t >$@

# and strip empty lines again:
%.tag-trim-clean.$(LANG1) %.tag-trim-clean.$(LANG2): %.tag-trim.$(LANG1) %.tag-trim.$(LANG2)
	$(LEX_SCRIPTS)/strip-empty-lines.py $*.tag-trim $(LANG1) $(LANG2) $*.tag-trim-clean



### Gram IRSTLM and make an LM:
$(TOP)/irstlm:
	svn checkout svn://svn.code.sf.net/p/irstlm/code/trunk $@

$(IRSTLM)/bin/build-lm.sh: $(TOP)/irstlm
	cd $< && cmake -G "Unix Makefiles" -DCMAKE_INSTALL_PREFIX=$(TOP)/local
	cd $< && make -j
	cd $< && make install
	touch $@

%.lm.gz: corp.tag-clean.% $(IRSTLM)/bin/build-lm.sh
	rm -f $@
	build-lm.sh -i $< -o $@ -t tmp/


### Grab fast_align (not used yet):
$(TOP)/fast_align:
	git clone https://github.com/clab/fast_align
$(TOP)/local/bin/fast_align: $(TOP)/fast_align
	cd $< && make
	cp $</fast_align $@


### Grab mgiza and make it:
$(TOP)/mgiza:
	git clone https://github.com/moses-smt/mgiza.git $@

%/local/scripts/merge_alignment.py %/local/bin/mgiza: %/mgiza
	cd $</mgizapp && cmake -DCMAKE_INSTALL_PREFIX=$(TOP)/local
	cd $</mgizapp && make # -j on giza eats my memory
	cd $</mgizapp && make install

$(TOP)/local/bin/merge_alignment.py: $(TOP)/local/scripts/merge_alignment.py
	cp $< $@


### Use Moses to align the text with Giza:
giza.$(PREFIX1)/$(PREFIX1).A3.final.gz: corp.tag-trim-clean.$(LANG1) \
                                        corp.tag-trim-clean.$(LANG2) \
                                        $(TOP)/local/bin/merge_alignment.py \
                                        $(LANG2).lm.gz
	PYTHONIOENCODING=utf-8 perl $(TOP)/mosesdecoder/scripts/training/train-model.perl -external-bin-dir $(TOP)/local/bin \
	  -corpus corp.tag-trim-clean -f $(LANG1) -e $(LANG2) \
	  -mgiza -mgiza-cpus $(CPUS) \
	  -alignment grow-diag-final-and -reordering msd-bidirectional-fe \
	  -lm 0:5:$(abspath $(LANG2).lm.gz):0


### Grab lex-tools:
$(TOP)/apertium-lex-tools:
	svn co https://svn.code.sf.net/p/apertium/svn/trunk/apertium-lex-tools $@

$(LEX_SCRIPTS)/process-tagger-output: $(TOP)/apertium-lex-tools
	cd $(LEX_SCRIPTS) && make

# Note: this file will end up having lang2 in column 1, and 1 in 2, for some reason:
corp.phrasetable-pretransfer.$(PREFIX1): giza.$(PREFIX1)/$(PREFIX1).A3.final.gz $(TOP)/apertium-lex-tools
	zcat $< | $(LEX_SCRIPTS)/giza-to-moses.awk >$@.unsymmetrised
	<$@.unsymmetrised sed 's/|||/\t/g' | cut -f1,2 >$@.phrases
	paste $@.phrases model/aligned.grow-diag-final-and | sed 's/\t/|||/g' >$@

### Run bidix lookup on the phrasetable
corp.phrasetable-bil.$(PREFIX1): corp.phrasetable-pretransfer.$(PREFIX1)
	<$< sed 's/ ||| /\t/g' | cut -f2 | sed 's/~/ /g' \
	  | $(LEX_SCRIPTS)/process-tagger-output $(PREFIX1).autobil.bin > $@.tmp
	mv $@.tmp $@

corp.phrasetable-cleanbil.$(PREFIX1): corp.phrasetable-pretransfer.$(PREFIX1)
	<$< sed 's/ ||| /\t/g' | cut -f2 | sed 's/~/ /g' \
	  | $(LEX_SCRIPTS)/process-tagger-output $(PAIRDIR) $(PREFIX1) > $@



############
# Cleanup: #
############
clean:
	rm -rf corp.* tmp/ $(PREFIX1).nopardefs.dix
clean-lm:
	rm -f $(LANG1).lm.gz $(LANG2).lm.gz
clean-giza:
	rm -rf giza.$(PREFIX1)/ giza.$(PREFIX2)/ model/ corpus/

clean-data: clean clean-lm clean-giza

clean-deps:
	rm -rf $(TOP)/irstlm $(TOP)/mosesdecoder $(TOP)/mgiza $(TOP)/local

.PHONY: all clean clean-lm clean-giza clean-data clean-deps
